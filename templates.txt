from dragonfly import *
import Base
import inspect

context = AppContext(executable= , title= )
grammar = Base.ContinuousGrammar(grammar", context=context)

#decorator
def GrammarRule(rule):
    if inspect.isclass(rule):
        if issubclass(rule, Base.BaseQuickRules):
            rule(grammar)
        else:
            grammar.add_rule(rule())
    else:
        grammar.add_rule(rule)

### Your Rules Go Here
# @GrammarRule
# class ExampleRule(Base.ContinuousRule):
#    spec = "example rule"
#    def _process_recognition(self, node, extras):
#    pass
#
# @GrammarRule
# class QuickRules(Base.QuickContinuousRules):
#     mapping = {
#         "control sea": Key("c-c"),
#         "control bee": Key("c-b"),
#     }

grammar.load()

def unload():
    global grammar
    if grammar:
        grammar.unload()
    grammar = None